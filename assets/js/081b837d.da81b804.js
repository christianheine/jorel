"use strict";(self.webpackChunkjorel_docs=self.webpackChunkjorel_docs||[]).push([[732],{5471:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"agents/simple-agent","title":"Creating a Simple Agent","description":"This guide will walk you through creating a simple agent and using it to process tasks. We\'ll build a weather agent that can provide weather information for different cities.","source":"@site/docs/agents/simple-agent.md","sourceDirName":"agents","slug":"/agents/simple-agent","permalink":"/jorel/docs/agents/simple-agent","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"learn","previous":{"title":"Introduction to Agents","permalink":"/jorel/docs/agents/intro"},"next":{"title":"Task Processing Deep Dive","permalink":"/jorel/docs/agents/task-deep-dive"}}');var a=t(4848),i=t(8453);const r={sidebar_position:2},o="Creating a Simple Agent",l={},c=[{value:"Basic Setup",id:"basic-setup",level:2},{value:"Processing Tasks",id:"processing-tasks",level:2},{value:"Creating a Task",id:"creating-a-task",level:3},{value:"Executing a Task",id:"executing-a-task",level:3},{value:"Understanding Task Events",id:"understanding-task-events",level:3},{value:"Adding Context with Documents",id:"adding-context-with-documents",level:2},{value:"Customizing Response Format",id:"customizing-response-format",level:2},{value:"Step-by-Step Processing",id:"step-by-step-processing",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"creating-a-simple-agent",children:"Creating a Simple Agent"})}),"\n",(0,a.jsx)(n.p,{children:"This guide will walk you through creating a simple agent and using it to process tasks. We'll build a weather agent that can provide weather information for different cities."}),"\n",(0,a.jsx)(n.h2,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,a.jsx)(n.p,{children:"First, let's create a simple agent that can use a weather tool:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { JorEl } from \'jorel\';\nimport { z } from \'zod\';\n\nconst jorEl = new JorEl({ openAI: true });\n\n// 1. Register the tool at team level\njorEl.team.addTools([{\n  name: "get_weather",\n  description: "Get the current weather for a city",\n  executor: async ({ city }) => ({ \n    temperature: 22, \n    conditions: "sunny" \n  }),\n  params: z.object({\n    city: z.string(),\n  }),\n}]);\n\n// 2. Create the agent\nconst weatherAgent = jorEl.team.addAgent({\n  name: "weather_agent",\n  description: "Specialist in weather information",\n  systemMessageTemplate: \n    "You are a weather specialist. " +\n    "Provide detailed weather information when asked.",\n  allowedTools: ["get_weather"],\n});\n'})}),"\n",(0,a.jsx)(n.h2,{id:"processing-tasks",children:"Processing Tasks"}),"\n",(0,a.jsx)(n.p,{children:"A task represents a conversation with an agent. It tracks:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Messages between user and agent"}),"\n",(0,a.jsx)(n.li,{children:"Tool usage"}),"\n",(0,a.jsx)(n.li,{children:"Processing state"}),"\n",(0,a.jsx)(n.li,{children:"Events and statistics"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"creating-a-task",children:"Creating a Task"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Create a task with an initial user message\nconst task = await jorEl.team.createTask(\n  "What\'s the weather like in Sydney?"\n);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"executing-a-task",children:"Executing a Task"}),"\n",(0,a.jsx)(n.p,{children:"The simplest way to process a task is to execute it to completion:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const result = await jorEl.team.executeTask(task, {\n  limits: {\n    maxIterations: 10,  // Prevent infinite loops\n    maxGenerations: 6,  // Limit LLM calls\n    maxDelegations: 2,  // Limit agent delegations\n  },\n});\n\nconsole.log(result.result);\n// The weather in Sydney is sunny with a temperature of 22\xb0C.\n"})}),"\n",(0,a.jsx)(n.h3,{id:"understanding-task-events",children:"Understanding Task Events"}),"\n",(0,a.jsx)(n.p,{children:"Tasks generate events that help you understand what happened during processing:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const { events, stats, tokens } = result.eventsWithStatistics;\n\n// Log the sequence of events\nfor (const event of events) {\n  console.log(`${event.eventType}: ${event.action}`);\n}\n\n// Example output:\n// generation: Agent weather_agent generated assistant_with_tools message\n// toolUse: Agent weather_agent used tool get_weather\n// generation: Agent weather_agent generated assistant message\n"})}),"\n",(0,a.jsx)(n.h2,{id:"adding-context-with-documents",children:"Adding Context with Documents"}),"\n",(0,a.jsx)(n.p,{children:"You can provide contextual information to your agent using documents:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const weatherAgent = jorEl.team.addAgent({\n  name: "weather_agent",\n  description: "Specialist in weather information",\n  systemMessageTemplate: \n    "You are a weather specialist. Here is some context: {{documents}}",\n  allowedTools: ["get_weather"],\n  documents: [{\n    title: "Temperature Guidelines",\n    content: "Always provide temperatures in both Celsius and Fahrenheit."\n  }],\n});\n'})}),"\n",(0,a.jsx)(n.h2,{id:"customizing-response-format",children:"Customizing Response Format"}),"\n",(0,a.jsx)(n.p,{children:"You can specify that your agent should return JSON responses:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const weatherAgent = jorEl.team.addAgent({\n  name: "weather_agent",\n  description: "Specialist in weather information",\n  systemMessageTemplate: \n    "You are a weather specialist. Return all responses as JSON with fields: " +\n    "city, temperature_c, temperature_f, conditions",\n  allowedTools: ["get_weather"],\n  responseType: "json",\n});\n\nconst task = await jorEl.team.createTask(\n  "What\'s the weather in Sydney?"\n);\n\nconst result = await jorEl.team.executeTask(task);\nconsole.log(result.result);\n// {\n//   "city": "Sydney",\n//   "temperature_c": 22,\n//   "temperature_f": 71.6,\n//   "conditions": "sunny"\n// }\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-by-step-processing",children:"Step-by-Step Processing"}),"\n",(0,a.jsx)(n.p,{children:"Instead of executing a task to completion, you can process it step by step:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Create the task\nconst task = await jorEl.team.createTask(\n  "What\'s the weather in Sydney?"\n);\n\n// Process one step at a time\nlet currentTask = task;\nwhile (currentTask.status !== "completed" && currentTask.status !== "halted") {\n  // Resume the task for one step\n  currentTask = await jorEl.team.resumeTask(currentTask, {\n    limits: {\n      maxIterations: 10,\n      maxGenerations: 6,\n    },\n  });\n\n  // Check what happened in this step\n  const latestEvent = currentTask.events[currentTask.events.length - 1];\n  console.log(`Step completed: ${latestEvent.eventType}`);\n  \n  if (currentTask.status === "halted") {\n    console.log(`Task halted: ${currentTask.haltReason}`);\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Clear System Messages"}),": Make your agent's role and capabilities clear in the system message"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Appropriate Limits"}),": Always set reasonable limits when executing tasks to prevent:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Infinite loops ( ",(0,a.jsx)(n.code,{children:"maxIterations"})," )"]}),"\n",(0,a.jsxs)(n.li,{children:["Excessive costs ( ",(0,a.jsx)(n.code,{children:"maxGenerations"})," )"]}),"\n",(0,a.jsxs)(n.li,{children:["Deep delegation chains ( ",(0,a.jsx)(n.code,{children:"maxDelegations"})," )"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Error Handling"}),": Tasks can halt for various reasons:"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'   if (result.status === "halted") {\n     switch (result.haltReason) {\n       case "maxIterations":\n         console.log("Task took too many steps");\n         break;\n       case "maxGenerations":\n         console.log("Task exceeded LLM call limit");\n         break;\n       case "approvalRequired":\n         console.log("Task needs user approval to continue");\n         break;\n       // ... handle other cases\n     }\n   }\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"4",children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Resource Monitoring"}),": Keep track of token usage with ",(0,a.jsx)(n.code,{children:"eventsWithStatistics"})]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"   const { tokens } = result.eventsWithStatistics;\n   console.log(\"Token usage:\", tokens);\n   // {\n   //   'gpt-4': {\n   //     input: 245,\n   //     output: 62\n   //   }\n   // }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Learn about ",(0,a.jsx)(n.a,{href:"/jorel/docs/agents/task-deep-dive",children:"Task Processing"})," in detail"]}),"\n",(0,a.jsxs)(n.li,{children:["Explore ",(0,a.jsx)(n.a,{href:"/jorel/docs/agents/delegation",children:"Delegation"})," between agents"]}),"\n",(0,a.jsxs)(n.li,{children:["Learn about ",(0,a.jsx)(n.a,{href:"/jorel/docs/agents/transfer",children:"Transfer"})," of control"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);